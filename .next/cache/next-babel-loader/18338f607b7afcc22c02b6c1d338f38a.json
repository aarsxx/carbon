{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/andikaleonardo/Personal/CV-Outdated/src/components/navbar/darkModeToggleIcons.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { IconAnimation } from '../../types/icon/iconAnimation';\nimport { IconDarkMode } from '../ui/icons/iconDarkMode';\nimport { IconLightMode } from '../ui/icons/iconLightMode';\nexport var DarkModeToggleIcons = function DarkModeToggleIcons(_ref) {\n  _s();\n\n  var isDarkMode = _ref.isDarkMode,\n      onToggle = _ref.onToggle;\n\n  var _useState = useState(false),\n      hasUserToggled = _useState[0],\n      userToggle = _useState[1];\n\n  var toggleDarkMode = function toggleDarkMode() {\n    if (!hasUserToggled) {\n      userToggle(true);\n    }\n\n    onToggle();\n  };\n\n  var animation = hasUserToggled ? IconAnimation.RotateRight : IconAnimation.None;\n  var Icon = isDarkMode ? IconLightMode : IconDarkMode;\n  return /*#__PURE__*/_jsxDEV(Icon, {\n    onClick: toggleDarkMode,\n    animation: animation\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(DarkModeToggleIcons, \"CvlSS6WjpeUR0HbF509RTuMNwpA=\");\n\n_c = DarkModeToggleIcons;\nDarkModeToggleIcons.displayName = 'DarkModeToggleIcons';\n\nvar _c;\n\n$RefreshReg$(_c, \"DarkModeToggleIcons\");","map":{"version":3,"sources":["/Users/andikaleonardo/Personal/CV-Outdated/src/components/navbar/darkModeToggleIcons.tsx"],"names":["React","useState","IconAnimation","IconDarkMode","IconLightMode","DarkModeToggleIcons","isDarkMode","onToggle","hasUserToggled","userToggle","toggleDarkMode","animation","RotateRight","None","Icon","displayName"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,aAAT,QAA8B,2BAA9B;AAOA,OAAO,IAAMC,mBAAuD,GAAG,SAA1DA,mBAA0D,OAA8B;AAAA;;AAAA,MAA3BC,UAA2B,QAA3BA,UAA2B;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBAC9DN,QAAQ,CAAC,KAAD,CADsD;AAAA,MAC5FO,cAD4F;AAAA,MAC5EC,UAD4E;;AAEnG,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,QAAI,CAACF,cAAL,EAAqB;AACnBC,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD;;AACDF,IAAAA,QAAQ;AACT,GALD;;AAMA,MAAMI,SAAS,GAAGH,cAAc,GAAGN,aAAa,CAACU,WAAjB,GAA+BV,aAAa,CAACW,IAA7E;AACA,MAAMC,IAAI,GAAGR,UAAU,GAAGF,aAAH,GAAmBD,YAA1C;AACA,sBAAO,QAAC,IAAD;AAAM,IAAA,OAAO,EAAEO,cAAf;AAA+B,IAAA,SAAS,EAAEC;AAA1C;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CAXM;;GAAMN,mB;;KAAAA,mB;AAabA,mBAAmB,CAACU,WAApB,GAAkC,qBAAlC","sourcesContent":["import React, { useState } from 'react';\nimport { IconAnimation } from '../../types/icon/iconAnimation';\nimport { IconDarkMode } from '../ui/icons/iconDarkMode';\nimport { IconLightMode } from '../ui/icons/iconLightMode';\n\ninterface DarkModeToggleIconsProps {\n  isDarkMode: boolean;\n  onToggle: () => void;\n}\n\nexport const DarkModeToggleIcons: React.FC<DarkModeToggleIconsProps> = ({ isDarkMode, onToggle }) => {\n  const [hasUserToggled, userToggle] = useState(false);\n  const toggleDarkMode = () => {\n    if (!hasUserToggled) {\n      userToggle(true);\n    }\n    onToggle();\n  };\n  const animation = hasUserToggled ? IconAnimation.RotateRight : IconAnimation.None;\n  const Icon = isDarkMode ? IconLightMode : IconDarkMode;\n  return <Icon onClick={toggleDarkMode} animation={animation} />;\n};\n\nDarkModeToggleIcons.displayName = 'DarkModeToggleIcons';\n"]},"metadata":{},"sourceType":"module"}