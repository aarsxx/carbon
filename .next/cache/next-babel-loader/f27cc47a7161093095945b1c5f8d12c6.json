{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useMedia } from 'use-media';\nimport { site } from '../data/site';\nimport { storage } from '../utils/storage';\nimport { ColorThemeVariant } from '../types/theme/Colors';\nvar themeStorageKey = \"\".concat(site.author, \" - theme\");\nvar darkModeClass = 'dark-mode';\n\nvar usePrefersDarkMode = function usePrefersDarkMode() {\n  _s();\n\n  return useMedia('(prefers-color-scheme: dark)');\n};\n\n_s(usePrefersDarkMode, \"DYc0EYAqnnp2d4d8Xg/+3Yur0PM=\", false, function () {\n  return [useMedia];\n});\n\nexport var useDarkMode = function useDarkMode() {\n  _s2();\n\n  var _useState = useState(false),\n      isDarkMode = _useState[0],\n      toggle = _useState[1];\n\n  var prefersDarkMode = usePrefersDarkMode();\n\n  var toggleDarkMode = function toggleDarkMode() {\n    toggle(!isDarkMode);\n    storage.set(themeStorageKey, isDarkMode ? ColorThemeVariant.Light : ColorThemeVariant.Dark);\n    document.body.classList.toggle(darkModeClass);\n  };\n\n  useEffect(function () {\n    // If user prefers dark mode and no user-stored preference is set then change theme to dark\n    // without persisting theme to storage since only user action should persist to storage\n    if (prefersDarkMode && !storage.has(themeStorageKey)) {\n      toggle(true);\n      document.body.classList.add(darkModeClass);\n    }\n  }, [prefersDarkMode]);\n  useEffect(function () {\n    if (storage.get(themeStorageKey) === ColorThemeVariant.Dark) {\n      toggleDarkMode();\n    }\n  }, []);\n  return [isDarkMode, toggleDarkMode];\n};\n\n_s2(useDarkMode, \"X0GkLAgTYwwVVpjqdk2+lki0mBA=\", false, function () {\n  return [usePrefersDarkMode];\n});","map":{"version":3,"sources":["/Users/andikaleonardo/Personal/CV-Outdated/src/hooks/useDarkMode.ts"],"names":["useState","useEffect","useMedia","site","storage","ColorThemeVariant","themeStorageKey","author","darkModeClass","usePrefersDarkMode","useDarkMode","isDarkMode","toggle","prefersDarkMode","toggleDarkMode","set","Light","Dark","document","body","classList","has","add","get"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AAEA,IAAMC,eAAe,aAAMH,IAAI,CAACI,MAAX,aAArB;AACA,IAAMC,aAAa,GAAG,WAAtB;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA;;AAAA,SAAeP,QAAQ,CAAC,8BAAD,CAAvB;AAAA,CAA3B;;GAAMO,kB;UAAoCP,Q;;;AAE1C,OAAO,IAAMQ,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA;;AAAA,kBACFV,QAAQ,CAAU,KAAV,CADN;AAAA,MACxBW,UADwB;AAAA,MACZC,MADY;;AAE/B,MAAMC,eAAe,GAAGJ,kBAAkB,EAA1C;;AACA,MAAMK,cAAc,GAAG,SAAjBA,cAAiB,GAAY;AACjCF,IAAAA,MAAM,CAAC,CAACD,UAAF,CAAN;AACAP,IAAAA,OAAO,CAACW,GAAR,CAAYT,eAAZ,EAA6BK,UAAU,GAAGN,iBAAiB,CAACW,KAArB,GAA6BX,iBAAiB,CAACY,IAAtF;AACAC,IAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBR,MAAxB,CAA+BJ,aAA/B;AACD,GAJD;;AAMAP,EAAAA,SAAS,CAAC,YAAM;AACd;AACA;AACA,QAAIY,eAAe,IAAI,CAACT,OAAO,CAACiB,GAAR,CAAYf,eAAZ,CAAxB,EAAsD;AACpDM,MAAAA,MAAM,CAAC,IAAD,CAAN;AACAM,MAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBE,GAAxB,CAA4Bd,aAA5B;AACD;AACF,GAPQ,EAON,CAACK,eAAD,CAPM,CAAT;AASAZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIG,OAAO,CAACmB,GAAR,CAAYjB,eAAZ,MAAiCD,iBAAiB,CAACY,IAAvD,EAA6D;AAC3DH,MAAAA,cAAc;AACf;AACF,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO,CAACH,UAAD,EAAaG,cAAb,CAAP;AACD,CAzBM;;IAAMJ,W;UAEaD,kB","sourcesContent":["import { useState, useEffect } from 'react';\nimport { useMedia } from 'use-media';\nimport { site } from '../data/site';\nimport { storage } from '../utils/storage';\nimport { ColorThemeVariant } from '../types/theme/Colors';\n\nconst themeStorageKey = `${site.author} - theme`;\nconst darkModeClass = 'dark-mode';\n\nconst usePrefersDarkMode = (): boolean => useMedia('(prefers-color-scheme: dark)');\n\nexport const useDarkMode = () => {\n  const [isDarkMode, toggle] = useState<boolean>(false);\n  const prefersDarkMode = usePrefersDarkMode();\n  const toggleDarkMode = (): void => {\n    toggle(!isDarkMode);\n    storage.set(themeStorageKey, isDarkMode ? ColorThemeVariant.Light : ColorThemeVariant.Dark);\n    document.body.classList.toggle(darkModeClass);\n  };\n\n  useEffect(() => {\n    // If user prefers dark mode and no user-stored preference is set then change theme to dark\n    // without persisting theme to storage since only user action should persist to storage\n    if (prefersDarkMode && !storage.has(themeStorageKey)) {\n      toggle(true);\n      document.body.classList.add(darkModeClass);\n    }\n  }, [prefersDarkMode]);\n\n  useEffect(() => {\n    if (storage.get(themeStorageKey) === ColorThemeVariant.Dark) {\n      toggleDarkMode();\n    }\n  }, []);\n\n  return [isDarkMode, toggleDarkMode] as const;\n};\n"]},"metadata":{},"sourceType":"module"}