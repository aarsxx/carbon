{"ast":null,"code":"import { css } from 'styled-components';\nexport const scaleToRem = scale => `${scale}rem`;\nexport const scaleToPx = scale => `${scale}px`;\nexport const scaleSpacingToPx = scale => css(({\n  theme\n}) => scaleToPx(theme.spacings[scale]));\n\nconst scaleMediaQueryToPx = scale => css(({\n  theme\n}) => scaleToPx(theme.breakpoints[scale]));\n\nexport const scaleFontSizeToRem = scale => css(({\n  theme\n}) => scaleToRem(theme.fonts.sizeScale[scale]));\nexport const scaleToMediaQuery = scale => templateStrings => css`\n  @media (min-width: ${scaleMediaQueryToPx(scale)}) {\n    ${css(templateStrings)}\n  }\n`;","map":{"version":3,"sources":["/Users/andikaleonardo/Personal/CV-Outdated/src/theme/helpers/scaleHelpers.ts"],"names":["css","scaleToRem","scale","scaleToPx","scaleSpacingToPx","theme","spacings","scaleMediaQueryToPx","breakpoints","scaleFontSizeToRem","fonts","sizeScale","scaleToMediaQuery","templateStrings"],"mappings":"AAAA,SAASA,GAAT,QAAoB,mBAApB;AAIA,OAAO,MAAMC,UAAU,GAAIC,KAAD,IAAoB,GAAEA,KAAM,KAA/C;AAEP,OAAO,MAAMC,SAAS,GAAID,KAAD,IAAoB,GAAEA,KAAM,IAA9C;AAEP,OAAO,MAAME,gBAAgB,GAAIF,KAAD,IAAmBF,GAAG,CACpD,CAAC;AAAEK,EAAAA;AAAF,CAAD,KAA2BF,SAAS,CAACE,KAAK,CAACC,QAAN,CAAeJ,KAAf,CAAD,CADgB,CAA/C;;AAIP,MAAMK,mBAAmB,GAAIL,KAAD,IAAmBF,GAAG,CAChD,CAAC;AAAEK,EAAAA;AAAF,CAAD,KAA2BF,SAAS,CAACE,KAAK,CAACG,WAAN,CAAkBN,KAAlB,CAAD,CADY,CAAlD;;AAIA,OAAO,MAAMO,kBAAkB,GAAIP,KAAD,IAAmBF,GAAG,CACtD,CAAC;AAAEK,EAAAA;AAAF,CAAD,KAA2BJ,UAAU,CAACI,KAAK,CAACK,KAAN,CAAYC,SAAZ,CAAsBT,KAAtB,CAAD,CADiB,CAAjD;AAIP,OAAO,MAAMU,iBAAiB,GAAIV,KAAD,IAAkCW,eAAD,IAA2Cb,GAAI;AACjH,uBAAuBO,mBAAmB,CAACL,KAAD,CAAQ;AAClD,MAAMF,GAAG,CAACa,eAAD,CAAkB;AAC3B;AACA,CAJO","sourcesContent":["import { css } from 'styled-components';\nimport { ThemeProps } from '../../types/theme/Theme';\nimport { BreakpointScaleIndex } from '../parts/breakpoints';\n\nexport const scaleToRem = (scale: number) => `${scale}rem`;\n\nexport const scaleToPx = (scale: number) => `${scale}px`;\n\nexport const scaleSpacingToPx = (scale: number) => css(\n  ({ theme }: ThemeProps) => scaleToPx(theme.spacings[scale])\n);\n\nconst scaleMediaQueryToPx = (scale: number) => css(\n  ({ theme }: ThemeProps) => scaleToPx(theme.breakpoints[scale])\n);\n\nexport const scaleFontSizeToRem = (scale: number) => css(\n  ({ theme }: ThemeProps) => scaleToRem(theme.fonts.sizeScale[scale])\n);\n\nexport const scaleToMediaQuery = (scale: BreakpointScaleIndex) => (templateStrings: TemplateStringsArray) => css`\n  @media (min-width: ${scaleMediaQueryToPx(scale)}) {\n    ${css(templateStrings)}\n  }\n`;"]},"metadata":{},"sourceType":"module"}